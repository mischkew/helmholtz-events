<?php
namespace Event;

use PHPUnit_Framework_TestCase;
use org\bovigo\vfs\vfsStreamWrapper;
use org\bovigo\vfs\vfsStreamDirectory;
use org\bovigo\vfs\vfsStream;

class EventWriterTest extends PHPUnit_Framework_TestCase {

    public function testEventToJavascript() {
        $date = new EventDate();
        $date->setTo("12/03/2015");
        $date->setFrom("12/01/2015");

        $event = new Event();
        $event->setDate($date)
            ->addExtra("9A")
            ->addExtra("9EM")
            ->addTitle("Versammlung")
            ->addTitle("in der Aula")
            ->addTime("18.00 Uhr")
            ->addTime("19.00 Uhr");

        $js = EventWriter::eventToJavascript($event);
        $eventString1 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'18.00 Uhr%9A - Versammlung in der Aula' }";
        $eventString2 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'19.00 Uhr%9EM - Versammlung in der Aula' }";

        $this->assertEquals(2, count($js));
        $this->assertEquals($eventString1, $js[0]);
        $this->assertEquals($eventString2, $js[1]);
    }

    public function testEventToJavascriptWithoutTime() {
            $date = new EventDate();
        $date->setTo("12/03/2015");
        $date->setFrom("12/01/2015");

        $event = new Event();
        $event->setDate($date)
            ->addExtra("9A")
            ->addExtra("9EM")
            ->addTitle("Versammlung")
            ->addTitle("in der Aula")
            ->addTime("18.00 Uhr");

        $js = EventWriter::eventToJavascript($event);
        $eventString1 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'18.00 Uhr%9A - Versammlung in der Aula' }";
        $eventString2 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'-%9EM - Versammlung in der Aula' }";

        $this->assertEquals(2, count($js));
        $this->assertEquals($eventString1, $js[0]);
        $this->assertEquals($eventString2, $js[1]);
    }

    public function testEventToJavascriptWithoutExtras() {
        $date = new EventDate();
        $date->setTo("12/03/2015");
        $date->setFrom("12/01/2015");

        $event = new Event();
        $event->setDate($date)
            ->addExtra("9A")
            ->addTitle("Versammlung")
            ->addTitle("in der Aula")
            ->addTime("18.00 Uhr")
            ->addTime("19.00 Uhr");

        $js = EventWriter::eventToJavascript($event);
        $eventString1 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'18.00 Uhr%9A - Versammlung in der Aula' }";
        $eventString2 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'19.00 Uhr%Versammlung in der Aula' }";

        $this->assertEquals(2, count($js));
        $this->assertEquals($eventString1, $js[0]);
        $this->assertEquals($eventString2, $js[1]);
    }

    public function testBuildJavascriptFromEvents() {
        $date = new EventDate();
        $date->setTo("12/03/2015");
        $date->setFrom("12/01/2015");

        $event = new Event();
        $event->setDate($date)
            ->addExtra("9A")
            ->addTitle("Versammlung")
            ->addTitle("in der Aula")
            ->addTime("18.00 Uhr")
            ->addTime("19.00 Uhr");


        $events = [$event, $event];
        $js = EventWriter::buildJavascriptFromEvents($events);

        $eventString1 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'18.00 Uhr%9A - Versammlung in der Aula' }";
        $eventString2 = "{ startDate: '12/01/2015', endDate: '12/03/2015', title: " .
                     "'19.00 Uhr%Versammlung in der Aula' }";

        $jsTestString = "/** AUTOGENERATED EVENT DATA **/\n" .
                      "'use strict';\n" .
                      "\n" .
                      "var events = [\n" .
                      "$eventString1,\n" .
                      "$eventString2,\n" .
                      "$eventString1,\n" .
                      "${eventString2}\n" .
                      "];\n";

        $this->assertEquals($jsTestString, $js);
    }

    public function testWriteEventsToFile() {
        vfsStreamWrapper::register();
        vfsStreamWrapper::setRoot(new vfsStreamDirectory('write-dir'));

        $date = new EventDate();
        $date->setTo("12/03/2015");
        $date->setFrom("12/01/2015");

        $event = new Event();
        $event->setDate($date)
            ->addExtra("9A")
            ->addTitle("Versammlung")
            ->addTitle("in der Aula")
            ->addTime("18.00 Uhr")
            ->addTime("19.00 Uhr");


        $events = [$event, $event];
        EventWriter::writeEventsToFile($events, vfsStream::url('write-dir/test.js'));
        $this->assertTrue(vfsStreamWrapper::getRoot()->hasChild('test.js'));
    }
}
